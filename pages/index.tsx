// import Image from 'next/image';
// import { Inter } from 'next/font/google';
// const inter = Inter({ subsets: ['latin'] });
import Head from 'next/head';
import styles from '@/styles/Home.module.css';
import Card from '@/components/card/card';
import DollarCard from '@/components/card/dollarCard/dollarCard';
import HollidayCard from '@/components/card/hollidayCard/hollidayCard';
import Header from '@/components/header/header';
import { FunctionComponent } from 'react';

enum CardType {
  Dollar = 1,
  Holiday = 2,
}

type DolarData = {
  value: string;
};

type HollidayData = {
  day: string;
  left: string;
  reason: string;
};

type CardData = {
  id: number;
  title: string;
  footer: string;
  data: DolarData | HollidayData;
  type: number;
};

type Props = {
  cards: CardData[];
};

const Home: FunctionComponent<Props> = ({ cards }) => (
  <>
    <Head>
      <title>Infohub</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className={styles.main}>
      <Header />
      {cards.map((card: any) => (
        <Card
          key={card.id}
          data={{
            title: card.title,
            footer: card.footer,
          }}
        >
          {card.type === CardType.Dollar ? (
            <DollarCard value={card.data.value} />
          ) : null}
          {card.type === CardType.Holiday ? (
            <HollidayCard
              day={card.data.day}
              reason={card.data.reason}
              left={card.data.left}
            />
          ) : null}
        </Card>
      ))}
    </main>
  </>
);

export const getServerSideProps = async () => {
  var HTMLParser = require('node-html-parser');
  const dolarHoyResp = await fetch('https://dolarhoy.com');
  const dolarHoy = await dolarHoyResp.text();

  const dolarHoyRoot = HTMLParser.parse(dolarHoy);
  const dolarBlueTile = dolarHoyRoot.querySelector('.tile.dolar');
  const dolarBlue = dolarBlueTile
    .querySelector('.venta')
    .querySelector('.val')
    .innerHTML.toString();

  const dolarBlueUpdateDate = dolarBlueTile
    .querySelector('.tile.update')
    .querySelector('span')
    .innerHTML.toString();
  const cards: CardData[] = [
    {
      id: 0,
      title: 'Dólar Blue',
      footer: dolarBlueUpdateDate,
      data: { value: dolarBlue },
      type: CardType.Dollar,
    },
  ];

  const hollidayResp = await fetch('https://www.lanacion.com.ar/feriados/');
  const holliday = await hollidayResp.text();

  const hollidayRoot = HTMLParser.parse(holliday);
  const hollidayNumber = hollidayRoot
    .querySelector('.com-text.sueca.--font-bold.--threexl')
    .innerHTML.toString();
  const hollidayLeft = hollidayRoot
    .querySelector('.com-text.--l')
    .innerHTML.toString()
    .replace('<strong>', '')
    .replace('</strong>', '')
    .replace(' para el próximo feriado', '');
  const hollidayMonth = hollidayRoot
    .querySelector('.com-text.--font-bold.--m')
    .innerHTML.toString();
  const hollidayReason = hollidayRoot
    .querySelector('.com-text.--s')
    .innerHTML.toString();

  cards.push({
    id: 1,
    title: 'Próximo Feriado',
    footer: dolarBlueUpdateDate,
    data: {
      day: `${hollidayNumber}  ${hollidayMonth}`,
      left: hollidayLeft,
      reason: hollidayReason,
    },
    type: CardType.Holiday,
  });

  return {
    props: {
      cards,
    },
  };
};

export default Home;
